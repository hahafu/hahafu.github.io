<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[struts2_03]]></title>
    <url>%2F2019%2F04%2F20%2Fstruts2_03%2F</url>
    <content type="text"><![CDATA[struts2学习_03struts2核心配置文件 1、struts.xml名称和位置固定。默认放在项目的src源文件夹下，如果想改变位置，可以在web.xml中配置。 2、配置文件中主要三个标签有package、action、result，标签里的属性。标签package 1 类似于代码包，区别不同的action，要配置action，必须首先写package标签，在package里面才能 配置action 2 package标签属性（1）name属性。 name属性值根功能本身没有关系的，在一个配置文件中可以写多个package标签，name属性值不能相同的（2）extends属性。extends=&quot;struts-default&quot;属性值固定的，struts-default写了这个属性之后，在package里面配置的类具有action功能（3）namespace属性。namespace=&quot;/&quot;namespace属性值和action标签里面的name属性值构成访问路径标签action 1 action标签里配置action访问路径 2 action标签属性（1）name属性namespace属性值和action标签里面的name属性值构成访问路径在package标签里面写多个action标签，但是action的name属性值不能相同的（2）class属性action类的全路径（3）method属性比如在action里面默认执行的方法execute方法，但是在action里面写其他的方法，让action里面多个方法执行，使用method进行配置标签result 1 根据action的方法返回值，配置到不同的路径里面 2 result标签属性（1）name属性和action中的方法返回值相同，配置返回值跳转至不同的页面（2）type属性配置如何到路径中（转发或者重定向）type属性默认值 做转发操作（不写）struts2常量配置 1 struts2框架，帮我们实现一部分功能，struts2里有常量，在常量中封装一部分功能 2 struts2默认常量位置为，项目库struts2核心jar包下struts2-core-2.3.24.jar/org.apache.struts2/default.properties 3 修改struts2默认常量值 （1）常用方式在struts,xml中进行配置&lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt;（2）还有两种方式在src下面创建 struts.properties，进行修改在web.xml进行配置 4 最常用常量struts.i18n.encoding=UTF-8(1）表单提交数据到action里面，在action可以获取表单提交数据，(2）表单提交数据有中文，有乱码问题，解决：post提交直接设置编码get提交后需要做编码转换(3）如果在action获取表单通过post方式提交中文，中文乱码问题帮解决了，不需要自己处理问题分模块开发 单独写配置文件，把配置文件引入到核心配置文件中&lt;!-- 引入hello.xml文件 --&gt;&lt;include file=&quot;cn/com/action/hello.xml&quot;&gt;&lt;/include&gt; action编写方式 1 action编写有三种方式第一种 创建普通类，这个不继承任何类，不实现任何接口第二种 创建类，实现接口 Action第三种 创建类，继承类 ActionSupport（经常使用） 访问action的方法 1 有三种方式实现第一种 使用action标签的method属性，在这个属性里面写执行的action的方法第二种 使用通配符方式实现（最常用）第三种 动态方法调用 2 常犯错误（1）如果action方法有返回值，在配置文件中没有配置，出现404错误（2）在action里面的方法有返回值，如果有返回值时候类型必须是String（3）action里面的方法可以没有返回值，没有返回值时候，在result标签不需要配置或者 把方法写成void 让返回值，返回 ”none” 3 使用action标签method属性 &lt;action name=&quot;userAction&quot; class=&quot;cn.com.action.HelloAction&quot; method=&quot;add&quot;&gt;&lt;/action&gt;action标签的method属性值是action类中的方法名缺点：action每个方法都需要配置，如果action里面有多个方法，配置很多的action 4 使用通配符实现（最常用）在action标签里面name属性，name属性值里面写 符号 星号`&lt;action name=”hello_“ class=”cn.com.action.HelloAction” method=”{1}”&gt;` “ ” 表示匹配任意内容 ，method={1}表示第一个“ ”的值。 比如说访问add方法，method={1}表示把add值放到第一个“ * ”号，最后访问的就是 hello_add.action这种方法的好处就是当配置太多时，通过合理设计jsp中的结尾和类名及方法名，可以极大减少代码量！ 5 动态方法调用首先在struts.xml中开启动态方法访问&lt;!--开启动态方法模式 --&gt;&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot;&gt;&lt;/constant&gt;访问路劲写为：&lt;a href=&quot;${pageContext.request.contextPath}/hello!addUser&quot;&gt;添加&lt;/a&gt;通过“！”前的字符找到action标签的name属性值，找到相应的类，“！”后面的字符表示执行的方法，类名和方法名找到了自然就可以调用方法]]></content>
  </entry>
  <entry>
    <title><![CDATA[struts2_02]]></title>
    <url>%2F2019%2F04%2F17%2Fstruts2_02%2F</url>
    <content type="text"><![CDATA[struts2学习_02struts2执行过程 浏览器向服务器发送请求。 比如：localhost:8080/struts2_test1/userAction.action，Tomcat接收到请求，Tomcatserver来选择处理这个请求的Web应用，然后由struts2_test1这个web项目处理请求。 Tomcat服务器读取struts2_test1项目下的web.xml文件。 在web.xml下找到配置的struts2过滤器，请求会经过过滤器，`&lt;url-pattern&gt;/*&lt;/url-pattern&gt;`表示过滤所有请求。过滤器会在服务器启动时创建。 struts过滤器实现的功能、 第一步：获取请求路劲，得到路径中的userAction值 第二步：到src目录下找到struts.xml文件，使用dom4j解析得到xml文件中的内容，把拿到userAction值到struts.xml，找到action标签，匹配name是否相同 第三步：匹配name相同，找到所在action标签的class属性值，得到action全路径，使用反射实现功能。 反射实现过程： （1）.得到class。class clazz = class.forName(&quot;action全路径&quot;) （2）.得到名称是execute的方法。Method method = clazz.getMethod(&quot;execute&quot;) （3）.方法执行。Object obj = method.Invoke() 第四步：得到action的返回值，回到struts.xml中找到action标签下的result标签，配置result标签的name属性值，值一样跳转至相应的页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[struts2_01]]></title>
    <url>%2F2019%2F04%2F17%2Fstruts2_01%2F</url>
    <content type="text"><![CDATA[struts2学习_01一、struts2概述1、Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。2、Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品。虽然从Struts 1到Struts 2有着太大的变化，但是相对于WebWork，Struts 2的变化很小。 二、struts2框架入门 struts2版本为struts-2.3.24 第一步：导入struts2框架jar包（1）从struts2官网下载完整包解压，在lib目录中有jar包，不能把这些jar包都导入项目中，其中很多jar包用不上 （2）到apps目录中，找到示例程序解压，然后找到示例程序下的lib目录，复制里面的jar包到自己新建的web项目中 第二部：在web.xml中配置struts过滤器 123456789&lt;filter&gt; &lt;filter-name&gt;struts&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;struts&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 第三步：创建action （1）新建一个普通类，然后在类中写execute方法 123456789101112public class HelloAction extends &#123; /** *(1)每次访问servlet时，都会执行service方法 *(2)每次访问action,默认执行execute方法 */ private static final long serialVersionUID = 1L; public String execute() &#123; return "ok"; &#125;&#125; 第四步：配置action的访问路径 （1）创建struts2核心配置文件， 核心配置文件名称和位置是固定的， 位置必须在src下面，名称 struts.xml （2）引入dtd约束 1234&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE struts PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN" "http://struts.apache.org/dtds/struts-2.3.dtd"&gt; （3）struts.xml配置action访问路径 123456789&lt;struts&gt; &lt;!-- package标签的name属性值为包名，extends="struts-default"就是继承struts-default.xml，它里面定义了许多跳转类型、拦截器等一些常用的东西，namespace：命名空间，默认为'/'表示webapp根目录 --&gt; &lt;package name="hello" extends="struts-default" namespace="/"&gt; &lt;!-- action标签的name属性值为访问名称--&gt; &lt;action name="userAction" class="cn.com.action.HelloAction"&gt; &lt;result name="ok"&gt;/hello.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; 然后把项目部署到Tomcat中，在浏览器中访问，访问路劲为localhost:8080/struts2_test1/userAction.action，localhost:8080表示本机8080端口，也就是Tomcat 服务器端口，后面接上项目名和action名，用“/”隔开]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
